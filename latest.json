{
  "version": "0.2.2.238",
  "archive_sha1": "c55032bd48fba970af145975c44acdbd765df58b",
  "archive_url": "https://github.com/downloads/xyzzy-022/xyzzy/xyzzy-0.2.2.238.zip",
  "release_note": "xyzzy リリースノート\n====================\n\n  * バージョン: 0.2.2.238\n  * リリース日: 2012-04-29\n  * ホームページ: <http://xyzzy-022.github.com>\n\n\nはじめに\n--------\n\nxyzzy 0.2.2.238 では主に文字コード自動判別周りの改善、\nメジャーモードのインデント処理のバグ修正、\nフォントサイズの変更 API の追加を行なっています。\n\n\nインストール\n------------\n\nインストーラはありませんので zip を展開するだけです。\nインストールから初期設定までは以下を参照してください。\n\n  * [QuickTour - XyzzyWiki]\n\n\nアップデート\n------------\n\n以下の手順で 0.2.2.235 からアップデートしてください。\n\n  1. 0.2.2.235 のバックアップ取得\n  2. 0.2.2.238 を上書き\n  3. $XYZZY/html を削除 ($XYZZY/docs/old に移動しています)\n  4. xyzzy.wxp を削除\n  5. xyzzy.exe 起動\n\nlisp/ 配下や etc/ 配下をカスタマイズしている場合は\n上書き後に再度カスタマイズをお願いします。\n\n\n機能追加\n--------\n\n  * 文字コード判定を改善しました (x022235, #108)\n\n    文字コードの判定に [libguess] を利用するようにしました。\n    また、ファイルの先頭から 256K バイトを見て文字コードを判定するようにしました\n    (0.2.2.235 では 64K バイト)。\n\n    文字コードの判定方法および判定に利用するバッファサイズは以下の変数で指定できます。\n\n    ```lisp\n    ;; 文字コード判定処理のデフォルト設定\n    (setq *detect-char-encoding-mode* :libguess)\n    (setq *detect-char-encoding-buffer-size* #x40000)\n    ```\n\n    IPA 辞書に含まれる 32 万個の単語を利用して自動判別の精度を評価した結果は\n    以下のとおりです。\n\n    ```\n    encoding   | 0.2.2.238               | 0.2.2.235\n    -----------+-------------------------+------------------------\n    JIS        | 325871/325871 (100.00%) | 325871/325871 (100.00%)\n    Shift_JIS  | 324646/325839 ( 99.63%) | 325839/325839 (100.00%)\n    EUC-JP     | 323407/325871 ( 99.24%) | 195228/325871 ( 59.91%)\n    UTF-8      | 319157/325871 ( 97.94%) | 149699/325871 ( 45.94%)\n\n    ※正解数/単語数 (正解率)\n    ```\n\n    Shift_JIS の判定精度が 0.2.2.235 と比べて若干落ちていますが、\n    UTF-8 と EUC-JP の判定精度が大幅に改善していることが分かります。\n\n    ただ、半角カタカナを含む Shift_JIS のファイルの場合 EUC-JP と誤認することが\n    多くなっています。\n\n    その場合、以下の設定をすることで 0.2.2.235 と同じ動作に変更できます。\n\n    ```lisp\n    ;; 文字コード判定処理を 0.2.2.235 と同じにする\n    (setq *detect-char-encoding-mode* :xyzzy)\n    (setq *detect-char-encoding-buffer-size* #x10000)\n    ```\n\n  * クリップボード・エンコーディングに自動判別を追加しました (x022235, #73)\n\n    デフォルトは Shift_JIS のままなので、自動判別を有効にしたい場合は\n    以下の設定を行なってください。\n\n    ```lisp\n    ;; クリップボードエンコーディングを自動判別\n    (setq *clipboard-char-encoding* *encoding-auto*)\n    ```\n\n  * フォントを変更する API を追加しました (x022235, #110)\n\n    * `ed:increase-text-font-size`\n    * `ed:decrease-text-font-size`\n    * `ed:set-text-fontset`\n    * `ed:get-text-fontset`\n\n    以下の設定で Ctrl +, Ctrl - でフォントサイズを変更できます。\n\n    ```lisp\n    ;; Ctrl +, - でフォントサイズ変更\n    (global-set-key #\\C-+ 'increase-text-font-size)\n    (global-set-key #\\C-- 'decrease-text-font-size)\n    ```\n\n    また、表示メニュー → 文字のサイズから変更できます。\n\n    この API は xyzzy 全体のフォントを指定するものです。\n    バッファまたはウィンドウごとにフォントを指定する API は今後追加予定です。\n\n  * `grep` 前に実行されるフックを追加しました (x022235, #205)\n\n    * `ed:*before-grep-hook*`\n    * `ed:*before-grepd-hook*`\n\n    `grep` または `grep-dialog` 実行時に検索キーワード (string または regex) を\n    引数に指定してこのフックを呼び出します。\n\n    例えば以下の設定をすることで `grep` 途中に `Ctrl-g` で停止しても\n    [grep-mode] が有効になります。\n\n    ```lisp\n    ;; grep-mode\n    (require \"grep-mode\")\n    (add-hook '*grep-hook* 'ed::grep-mode)\n    (add-hook '*grepd-hook* 'ed::grep-mode)\n\n    (defun grep-mode-for-before-hook (pattern)\n      (ed::grep-mode)\n      (toggle-read-only nil))\n    (add-hook '*before-grep-hook* 'grep-mode-for-before-hook)\n    (add-hook '*before-grepd-hook* 'grep-mode-for-before-hook)\n    ```\n\n  * xyzzy のワーキングディレクトリを変更する API を追加しました (x022235, #168)\n\n    * `ed:chdir`\n\n    関連付けたファイルをダブルクリックして xyzzy を新規に起動すると、\n    そのファイルがあるディレクトリが xyzzy のワーキングディレクトリとなるため、\n    xyzzy を起動したままそのディレクトリを削除しようとすると\n    「別のプログラムがこのファイルを開いているので、操作を完了できません」\n    というエラーになります。\n\n    以下の設定をすることで常に xyzzy.exe のある場所をワーキングディレクトリと\n    することが出来ます。\n\n    ```lisp\n    ;; xyzzy 起動時に $XYZZY に移動\n    (defun chdir-to-system-root ()\n      (chdir (si:system-root)))\n    (add-hook '*post-startup-hook* 'chdir-to-system-root)\n    ```\n\n  * キーワードファイルのカスタマイズを機能を強化しました (x022235, #165)\n\n    キーワードファイルの中から他のキーワードファイルを読み込む機能、\n    および定義済みのキーワードを削除する機能を追加しました。\n\n    例えば etc/C# から LINQ のクエリ式のキーワードを削除して、#region と #endregion\n    の色を変えたい場合は以下のように設定します。\n\n    まず、カスタマイズしたキーワードファイルを置く場所を\n    `*keyword-load-path*` に設定します。\n\n    ```lisp\n    ;; $XYZZY/keywords にカスタマイズしたキーワードファイルを置く\n    (pushnew (merge-pathnames \"keywords\" (si:system-root))\n             *keyword-load-path* :test #'string=)\n    ```\n\n    次に、$XYZZY/keywords/C# に以下の内容のファイルを置きます。\n\n    ```\n    ;;;; C# のキーワードファイルのカスタマイズ\n    ;;\n    :: #reigon と #endregion はキーワード番号0の色を利用\n    ;; LINQ のクエリ式のキーワードを削除\n    ;; http://msdn.microsoft.com/en-us/library/bb310804.aspx\n\n    ;; etc/C# の読み込み\n    ;@include <C#>\n\n    ;; 色の変更\n    ;*0\n    #region\n    #endregion\n\n    ;; キーワードの削除\n    ;*--\n    from\n    where\n    select\n    group\n    into\n    orderby\n    join\n    let\n    in\n    on\n    equals\n    by\n    ascending\n    descending\n    ```\n\n    基本的に etc/ 配下は直接修正せずに、この方法で差分だけを記述したキーワードファイルを\n    別途用意することをおすすめします（アップデートが楽になります）。\n\n\nバグ修正\n--------\n\n  * java-mode: アノテーションのインデントに対応しました (x022235, #225)\n\n    ```java\n    public class MyTest {\n      @Test\n      public static void testFoo() { // ここがインデントされないように修正\n      }\n    }\n    ```\n\n  * c#-mode: ネストした using のインデントに対応しました (x022235, #196)\n\n    ```c#\n    public class Foo {\n      public void Bar() {\n        using (FileStream f = new FileStream(\"test.txt\", FileMode.Read))\n        using (StreamReader s = new StreamReader(f)) // ここがインデントされないように修正\n        {\n        }\n      }\n    }\n    ```\n\n  * c#-mode: #region, #endregion のインデントに対応しました (x022235, #192)\n\n    ```c#\n    public class Foo {\n      #region    // ここがインデントされないように修正\n      public void Bar() {\n      }\n      #endregion // 同上\n    }\n    ```\n\n  * c#-mode: #if 〜 #endif の中に #endregion があるとインデントがおかしい問題を修正しました (x022235, #206)\n\n    ```c#\n    #if FOO\n    #region hoge\n    #endregion\n    #else\n    #endif\n    // ここでインデントすると「'else'が妙な場所にあります」というエラーになっていたのを修正\n    ```\n\n  * c#-mode, c++-mode: 属性のインデントがおかしい問題を修正しました (x022235, #226)\n\n    ```c#\n    class AnimalTypeTestClass {\n      [AnimalType(Animal.Dog)]\n      public void DogMethod() {}\n\n      [AnimalType(Animal.Cat)]\n      public void CatMethod() {}  // ここがインデントされないように修正\n\n      [Conditional(\"DEBUG\")]\n      [AnimalType(Animal.Bird)]   // 同上\n      public void BirdMethod() {} // 同上\n    }\n    ```\n\n  * c#-mode, c++-mode: enum のインデント対応しました (x022235, #207)\n\n    ```c#\n    enum E :\n      unsigned int { // ここがインデントされるように修正\n      Val1, Val2,\n    }\n    ```\n\n  * c++-mode: C++/CLI に対応しました (x022235, #195)\n\n    ```c#\n    using namespace System;\n\n    [Serializable]\n    public ref class MyClass\n      : MyBase {   // ここがインデントされるように修正\n    private:\n      [NonSerialized]\n      int m_nData; // ここがインデントされないように修正\n    };\n    ```\n\n  * c-mode, c++-mode, c#-mode: マクロのインデントに対応しました (x022235, #194)\n\n    * `ed:c-preprocessor-offset`\n    * `ed:c++-preprocessor-offset`\n    * `ed:csharp-preprocessor-offset`\n\n    整数値を指定すると通常のインデント位置からのオフセットとして解釈します。\n    0 の場合は通常のインデント位置と同じ場所にインデントします。\n\n    上記変数に `nil` を指定すると従来通りインデントはしません (デフォルト)。\n\n    ```c\n    int main() {\n      #if DEBUG  // (setq c-preprocessor-offset 0) の場合のインデント位置\n      #if _WIN32 // 同上\n      hoge;\n      #endif     // 同上\n      #endif     // 同上\n    }\n    ```\n\n  * cmd.exe 実行時にワーキングディレクトリが UNC パスの場合は\n    c:\\Windows で起動するようにしました  (x022235, #209)\n\n    これにより UNC パス上のファイルを `M-x diff` した場合にエラーになっていた問題が\n    修正されました。\n\n  * BOM 付き UTF8 ファイルを `C-x |` でフィルタすると BOM が挿入される問題を修正しました (x022235, #197)\n\n  * クリップボードエンコーディングが sjis, utf-16 以外の場合に xyzzy でコピーして\n    メモ帳などに貼り付けると文字化けする問題を修正しました (x022235, #213)\n\n  * ウィンドウ位置がディスプレイを 1px でも上にはみ出ると前回終了時の位置が復元されない\n    問題を修正しました (x022235, #212)\n\n  * フォントサイズを大きくするとミニバッファのサイズがウィンドウサイズを越える問題を修正しました (x022235, #220)\n\n  * フォントサイズを小さくしてもミニバッファのサイズが元に戻らない問題を修正しました (x022235, #218)\n\n  * 巨大なファイルの `first-error` が遅い問題を修正しました (x022235, #100)\n\n  * C++ キーワードのタイポを修正しました (x022235, DeaR, #187)\n\n\nxyzzy Lisp 開発者向け機能追加\n-----------------------------\n\n  * 拡張子 .lisp をサポートしました (x022235, #177)\n\n    バイトコンパイルした場合は .lc ファイルが出来ます。\n    ロード順は .lc → .l → .lisp です。\n\n  * hashtable の印字形式に情報を追加しました (x022235, #228)\n\n    以下の様な形式で印字されます。\n\n    ```lisp\n    #<hashtable :test eql :size 0/17 12590184>\n    ```\n\n  * 文字列のバイトサイズを取得する API を追加しました (x022235, #48)\n\n    * `si:octet-length`\n\n    エンコーディングを指定して文字列のバイトサイズを求めることが出来ます。\n\n    ```lisp\n    (si:octet-length \"abcあいう\")\n    => 9\n    (si:octet-length \"abcあいう\" :encoding *encoding-utf8n*)\n    => 12\n    ```\n\n  * ハッシュテーブルの `:rehash-size` に float を指定できるようにしました (x022235, #55)\n\n    float を指定した場合「現在のハッシュテーブルのサイズ * rehash-size」で\n    rehash 後のハッシュテーブルの目安サイズを求めます。\n\n    ```lisp\n    ;; rehash 時にハッシュテーブルのサイズを 2 倍にする\n    (make-hash-table :rehash-size 2.0)\n    ```\n\n    デフォルトは 1.5 です。\n    また、1.5 より小さい値を指定した場合は 1.5 として扱います。\n\n  * ハッシュテーブルの `:rehash-threshold` を指定できるようにしました (x022235, #55)\n\n    ```lisp\n    ;; ハッシュテーブルの 90% を利用した時点で rehash\n    (make-hash-table :rehash-threshold 0.9)\n    ```\n\n    デフォルトは 0.8 です。\n\n    `:size`、`:rehash-threshold`、`:rehash-size` をデータの特性に合わせて\n    うまく指定することで rehash の回数を削減できます。\n\n    ```lisp\n    (defun print-hash-table-rehash (&key rehash-threshold rehash-size)\n      (let* ((h (make-hash-table :rehash-threshold rehash-threshold\n                                 :rehash-size rehash-size))\n             (prev-size (hash-table-size h)))\n        (dotimes (i 10000)\n          (setf (gethash i h) i)\n          (let* ((size (hash-table-size h))\n                 (count (hash-table-count h))\n                 (prev-count (1- count)))\n            (when (/= prev-size size)\n              (format t \"~5D/~5D (~5,2F) => ~5D/~5D (~5,2F)  x ~4,2F~%\"\n                      prev-count prev-size (/ prev-count prev-size)\n                      count size (/ count size)\n                      (/ size prev-size))\n              (setf prev-size size)\n              )))))\n    => print-hash-table-rehash\n\n    (print-hash-table-rehash :rehash-threshold 0.8 :rehash-size 1.5)\n       14/   17 ( 0.82) =>    15/   47 ( 0.32)  x 2.76\n       38/   47 ( 0.81) =>    39/  101 ( 0.39)  x 2.15\n       81/  101 ( 0.80) =>    82/  199 ( 0.41)  x 1.97\n      160/  199 ( 0.80) =>   161/  307 ( 0.52)  x 1.54\n      246/  307 ( 0.80) =>   247/  499 ( 0.49)  x 1.63\n      400/  499 ( 0.80) =>   401/  797 ( 0.50)  x 1.60\n      638/  797 ( 0.80) =>   639/ 1499 ( 0.43)  x 1.88\n     1200/ 1499 ( 0.80) =>  1201/ 2999 ( 0.40)  x 2.00\n     2400/ 2999 ( 0.80) =>  2401/ 4999 ( 0.48)  x 1.67\n     4000/ 4999 ( 0.80) =>  4001/ 8009 ( 0.50)  x 1.60\n     6408/ 8009 ( 0.80) =>  6409/19997 ( 0.32)  x 2.50\n    => nil\n\n    (print-hash-table-rehash :rehash-threshold 1.0 :rehash-size 3.0)\n       17/   17 ( 1.00) =>    18/  101 ( 0.18)  x 5.94\n      101/  101 ( 1.00) =>   102/  307 ( 0.33)  x 3.04\n      307/  307 ( 1.00) =>   308/  997 ( 0.31)  x 3.25\n      997/  997 ( 1.00) =>   998/ 2999 ( 0.33)  x 3.01\n     2999/ 2999 ( 1.00) =>  3000/ 8999 ( 0.33)  x 3.00\n     8999/ 8999 ( 1.00) =>  9000/29989 ( 0.30)  x 3.33\n    => nil\n    ```\n\n\nxyzzy Lisp 開発者向けバグ修正\n-----------------------------\n\n  * lisp-mode: Common Lisp 互換文字を補完できない問題を修正しました (x022235, #227)\n\n  * lisp-mode: マクロ名に # が含まれるとインデントがおかしい問題を修正しました (x022235, #193)\n\n    ```lisp\n    (with-c#-mode ()\n      ;; ここのインデントを修正\n      )\n    ```\n\n\n注意事項\n--------\n\n  * NetInstaller で入手可能な以下のパッケージは 0.2.2.238 では\n    本体に同梱しています。インストールすると古いファイルで上書きされるので\n    インストールしないようにしてください。\n\n    ```\n    keyword file                       2007.12.25     2007/12/25 01:27  | 2007.12.25     2007/12/25 01:27\n    reference.xml                      2007.12.25     2007/12/25 01:23  | 2007.12.25     2007/12/25 01:23\n    ```\n\n既知の問題\n----------\n\n  * format の `~n@A` 書式がバグっている\n\n    このバグの修正は影響範囲が大きいので修正されません。\n\n    ```lisp\n    (format nil \"~10@A\" \"hoge\")\n    \"hoge      \"                   ; 0.2.2.235, 0.2.2.236\n    \"      hoge\"                   ; 本来の仕様\n    ```\n\n  * ASCII 以外のサイズはお任せ時に日本語が縦長で表示される (#241)\n  * refresh-screen が多値を返す (#219)\n  * 循環リストを copy-tree すると落ちる (#191)\n  * software-type, software-version が CL と異なる (#169)\n  * NULL 文字をインクリメンタル検索しようとすると落ちる (#152)\n  * :typeがlistかvectorで:namedじゃない構造体でtypepがおかしい (#138)\n  * ローカル関数で (setf READER) (#137)\n  * dualウィンドウモードでfilerのディレクトリ指定が動かない (#130)\n  * c-modeでマクロの継続行のインデントがおかしい (#127)\n  * クリップボードにコピーするとxyzzyが固まる場合がある (#113)\n  * C-u 999 C-g 後にメニュー操作でエラー (#111)\n  * Vista 以降で再変換 (C-c C-c) が動作しない (#101)\n  * ファイル保存時にパーミッションを保存 (#96)\n  * ole で responseBody, responseStream を取得できない (#68)\n  * ole-for-each で ie.Document.all の IEnum を取得できない (#67)\n  * ole-create-event-sink に TypeLib のファイル名を明示的に指定しないとエラーになる (#66)\n  * 巨大な文字列に対する正規表現マッチがすごい遅い (#65)\n  * load 時の `*readtable*` がファイルローカルではない (#64)\n  * setf の最適化に bug (#63)\n  * handler-case で :no-error を指定してコンパイルするとエラー (#62)\n  * labels の lambda-list 内の init-form で同じ labels 式で定義したローカル関数を呼び出してると、コンパイルで挙動が変わる (#61)\n  * si:binhex-decode で落ちる (#45)\n  * multiframe: 画面端の折り返しがウィンドウ単位でちゃんと動くようにする変更を取り込む (#25)\n  * siteinit.l が sjis 以外で書かれていた場合に対応 (#11)\n  * multiframe: cpp-syntax の修正を取り込む (#10)\n\n`(provide \"xyzzy-0.2.2.238\")`\n\n\n  [libguess]: http://www.honeyplanet.jp/download.html#libguess\n  [grep-mode]: http://nazoking.s31.xrea.com:8080/k/grep-mode.l\n  [QuickTour - XyzzyWiki]: http://xyzzy.s53.xrea.com/wiki/index.php?QuickTour\n",
  "release_note_url": "http://xyzzy-022.github.com/xyzzy/2012/04/29/xyzzy-0_2_2_238-release-note/"
}
