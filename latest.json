{
  "version": "0.2.2.241",
  "archive_sha1": "fabb8c0126df923575a39ec1a75530a79c6f95a2",
  "archive_url": "https://github.com/downloads/xyzzy-022/xyzzy/xyzzy-0.2.2.241.zip",
  "archive_src_url": "https://github.com/downloads/xyzzy-022/xyzzy/xyzzy-src-0.2.2.241.zip",
  "release_note": "xyzzy リリースノート\n====================\n\n  * バージョン: 0.2.2.241\n  * リリース日: 2012-06-29\n  * ホームページ: <http://xyzzy-022.github.com>\n\n\nはじめに\n--------\n\nxyzzy 0.2.2.241 では主にバグ修正と Common Lisp との互換性の向上を行なっています。\n\n\nインストール\n------------\n\nインストーラはありませんので zip を展開するだけです。\nインストールから初期設定までは以下を参照してください。\n\n  * [QuickTour - XyzzyWiki]\n\n\nアップデート\n------------\n\n以下の手順で 0.2.2.235 からアップデートしてください。\n\n  1. 0.2.2.235 のバックアップ取得\n  2. 0.2.2.241 を上書き\n  3. $XYZZY/html を削除 ($XYZZY/docs/old に移動しています)\n  4. xyzzy.wxp を削除\n  5. xyzzy.exe 起動\n\nlisp/ 配下や etc/ 配下をカスタマイズしている場合は\n上書き後に再度カスタマイズをお願いします。\n\n\n機能追加\n--------\n\n  * `coding` マジックコメントをサポートしました (x022235, #288)\n\n    ファイルの先頭に `-*- coding: utf-8 -*-` などと書いてある場合に\n    指定されたエンコーディングでファイルを開くようにしました。\n\n  * マジックコメントが utf-8 の場合に utf-8n で開く (x022235, #307)\n\n    ファイルの先頭に `-*- coding: utf-8 -*-` や `-*- encoding: utf-8 -*-` などと書いてある場合に\n    utf-8n (BOM なしの UTF-8) としてファイルを開くようにしました。\n\n    ファイルの実際のエンコーディングが utf-8 (BOM 付の UTF-8) だった場合は\n    utf-8 として開きます。\n\n    なお、従来の動作 (常に utf-8 として開く) に戻したい場合は以下のように設定してください。\n\n    ```lisp\n    ;; encoding: utf-8 の場合に BOM 付き UTF-8 で開く (0.2.2.240 までの動作に戻す)\n    (setf *find-file-auto-encoding-use-utf8n* nil)\n    ```\n\n  * zlib 1.2.7 へ更新しました (x022235, #296)\n\n  * DEP を有効にしました (x022235, #175)\n\n\nバグ修正\n--------\n\n  * 0.2.2.239 で `-ro`, `-rw` オプションが使えなくなっていた問題を修正しました (x022235, sabimaru, #306)\n\n  * Windows 7 でウィンドウの復元位置がずれる問題を修正しました (x022235, #328)\n\n\nxyzzy Lisp 開発者向け機能追加\n-----------------------------\n\n  * 文字エンコードの情報を取得する関数を追加しました (x022235, #307)\n\n    * `char-encoding-type`\n    * `char-encoding-signature`\n\n    ```lisp\n    (char-encoding-type *encoding-utf8*)\n    => :utf8\n\n    (char-encoding-signature *encoding-utf8*)\n    => t\n\n    (char-encoding-type *encoding-utf8n*)\n    => :utf8\n\n    (char-encoding-signature *encoding-utf8n*)\n    => nil\n    ```\n\n  * FFI: 可変長引数に対応しました (x022235, #294)\n\n    `c:define-dll-entry` の引数宣言の最後に `&rest` を追加し、\n    呼び出し時に `(c:c-vaargs (型1 引数1) (型2 引数2) ...)` という形式で\n    可変長引数を指定してください。\n\n    ```lisp\n    (require \"foreign\")\n\n    (c:define-dll-entry\n      c:string\n      (sqlite3_mprintf :convention :cdecl) (c:string &rest) ; 可変長引数を取る場合 &rest を指定\n      \"sqlite3.dll\")\n\n    (c:define-dll-entry\n      c:void\n      (sqlite3_free :convention :cdecl) ((c:void *))\n      \"sqlite3.dll\")\n\n    (defun make-sql (text date)\n      (let ((ptr (sqlite3_mprintf (si:make-string-chunk \"INSERT INTO table VALUES ('%q', %d)\")\n                                  (c:c-vaargs ; 可変長引数の指定\n                                   (c:string (si:make-string-chunk text))\n                                   (c:int date)))))\n        (when (not (zerop ptr))\n          (unwind-protect\n              (si:unpack-string nil ptr)\n            (sqlite3_free ptr)))))\n\n    (make-sql \"It's a happy day!\" 31)\n    => \"INSERT INTO table VALUES ('It''s a happy day!', 31)\"\n    ```\n\n  * FFI: `c:c-size-of` を追加しました (x022235, #313)\n\n    ```lisp\n    (require \"foreign\")\n    (require \"wip/winapi\")\n\n    (c:c-size-of c:int)\n    => 4\n\n    (c:c-size-of c:int64)\n    => 8\n\n    (c:c-struct-size-of winapi:RECT)\n    => 16\n    ```\n\n  * `si:unpack-string` で C のポインタを指定可能としました (x022235, #311)\n\n    `si:make-chunk` と同じように `CHUNK` 引数が `nil` の場合は、\n    `OFFSET` をポインタとみなすようにしました。\n\n    ```lisp\n    (require \"foreign\")\n\n    (c:define-dll-entry\n      c:string\n      strerror (c:int)\n      \"msvcrt\")\n\n    (strerror 2)\n    => 41155912\n\n    (si:unpack-string nil (strerror 2))\n    => \"No such file or directory\"\n    ```\n\n  * `locally` 特殊形式を追加しました (x022235, #271)\n\n    [Common Lisp の locally] を追加しました。\n\n    ```lisp\n    (defun sample-function (y)  ;this y is regarded as special\n      (declare (special y))\n      (let ((y t))              ;this y is regarded as lexical\n        (list y\n              (locally (declare (special y))\n                ;; this next y is regarded as special\n                y))))\n    => sample-function\n\n    (sample-function nil)\n    => (t nil)\n    ```\n\n  * `reduce` に `:key` パラメータを追加しました (x022235, youz, #322)\n\n    ```lisp\n    (reduce #'+ '((orange . 3) (apple . 5) (grape . 2))\n            :key #'cdr)\n    => 10\n    ```\n\n  * `macro-function` に `environment` 引数を追加しました (youz, #326)\n\n    ```lisp\n    (macrolet ((foo (a b)\n                 `(+ ,a ,b))\n               (env (&environment env)\n                 env))\n      (setf env (env)))\n    => #<environment-object 134287448>\n\n    (macro-function 'foo)\n    => nil\n\n    (macro-function 'foo env)\n    => (macro (a b) (block foo (list '+ a b)))\n    ```\n\nxyzzy Lisp 開発者向けバグ修正\n-----------------------------\n\n  * `rename-package` で自分自身のニックネームを変更できない問題を修正しました (x022235, snmsts, #302)\n\n    ```lisp\n    (rename-package :common-lisp :common-lisp '(:cl))\n    => #<package: common-lisp>  ; 0.2.2.240 では => 同じ名前のパッケージが存在します: \"common-lisp\"\n\n    (package-nicknames :cl)\n    => (\"cl\")\n    ```\n\n  * `:key` に `nil` を指定するとエラーになる関数があったのを修正しました (x022235, #324)\n\n    ```lisp\n    (substitute 2 1 '(1 2 3 2 1) :key nil)\n    => (2 2 3 2 2)              ; 0.2.2.240 では => 関数が定義されていません: nil\n    ```\n\n  * `fill-pointer` を持つ `vector` を `:initial-contents` で正しく初期化出来ない問題を修正しました (x022235, youz, #325)\n\n    ```lisp\n    (setf v (make-array 3 :fill-pointer 2 :initial-contents '(1 2 3)))\n    => #(1 2)\n\n    (setf (fill-pointer v) 3)\n    => 3\n\n    v\n    => #(1 2 3)                 ; 0.2.2.240 では => #(1 2 nil)\n    ```\n\n  * `int64` の範囲を超える場合、`si:unpack-int64` の結果がおかしい問題を修正しました (x022235, #305)\n\n  * builtin パッケージを削除すると `si:list-builtin-packages` が `#<package anonymous>`\n    を返す問題を修正しました (x022235, #303)\n\n\nその他\n------\n\n  * Windows SDK 7.1 がなくてもビルドできるようになりました (x022235, #314)\n\n\n注意事項\n--------\n\n  * NetInstaller で入手可能な以下のパッケージは 0.2.2.241 では\n    本体に同梱しています。インストールすると古いファイルで上書きされるので\n    インストールしないようにしてください。\n\n    ```\n    keyword file                       2007.12.25     2007/12/25 01:27\n    reference.xml                      2007.12.25     2007/12/25 01:23\n    ```\n\n  * NetInstaller で入手可能な以下のパッケージの一部の機能は 0.2.2.241 では\n    本体に同梱しています。インストールするときは注意してください。\n\n    ```\n    lpp                                2008.05.05     2008/05/05 09:16\n    ```\n\n\n既知の問題\n----------\n\n  * マクロ・特殊形式の引数間違い時のエラーメッセージが意味不明 (#329)\n  * ミニバッファで補完時に落ちる場合がある (#321)\n  * macro-function が CL と異なる (#320)\n  * multiple-value-bind、multiple-value-setq の macro-function が nil (#319)\n  * special-form-p が特殊形式以外にも t を返す (#318)\n  * call-process :wait t でコマンドが固まると xyzzy も固まる (#316)\n  * make-process の :show パラメータが動作しない (#315)\n  * (setf (symbol-function)) がシンボル名を返す (#269)\n  * ASCII 以外のサイズはお任せ時に日本語が縦長で表示される (#241)\n  * software-type, software-version が CL と異なる (#169)\n  * :typeがlistかvectorで:namedじゃない構造体でtypepがおかしい (#138)\n  * ローカル関数で (setf READER) (#137)\n  * dualウィンドウモードでfilerのディレクトリ指定が動かない (#130)\n  * c-modeでマクロの継続行のインデントがおかしい (#127)\n  * クリップボードにコピーするとxyzzyが固まる場合がある (#113)\n  * C-u 999 C-g 後にメニュー操作でエラー (#111)\n  * Vista 以降で再変換 (C-c C-c) が動作しない (#101)\n  * ole で responseBody, responseStream を取得できない (#68)\n  * ole-for-each で ie.Document.all の IEnum を取得できない (#67)\n  * ole-create-event-sink に TypeLib のファイル名を明示的に指定しないとエラーになる (#66)\n  * 巨大な文字列に対する正規表現マッチがすごい遅い (#65)\n  * setf の最適化に bug (#63)\n  * handler-case で :no-error を指定してコンパイルするとエラー (#62)\n  * labels の lambda-list 内の init-form で同じ labels 式で定義したローカル関数を呼び出してると、コンパイルで挙動が変わる (#61)\n  * multiframe: 画面端の折り返しがウィンドウ単位でちゃんと動くようにする変更を取り込む (#25)\n\n\n`(provide \"xyzzy-0.2.2.241\")`\n\n\n  [QuickTour - XyzzyWiki]: http://xyzzy.s53.xrea.com/wiki/index.php?QuickTour\n  [Common Lisp の locally]: http://clhs.lisp.se/Body/s_locall.htm\n",
  "release_note_url": "http://xyzzy-022.github.com/xyzzy/2012/06/29/xyzzy-0_2_2_241-release-note/"
}
