{
  "version": "0.2.2.239",
  "archive_sha1": "e390c06e9b9ff77df86511eefc78f6ebe57bda3d",
  "archive_url": "https://github.com/downloads/xyzzy-022/xyzzy/xyzzy-0.2.2.239.zip",
  "archive_src_url": "https://github.com/downloads/xyzzy-022/xyzzy/xyzzy-src-0.2.2.239.zip",
  "release_note": "xyzzy リリースノート\n====================\n\n  * バージョン: 0.2.2.239\n  * リリース日: 2012-05-29\n  * ホームページ: <http://xyzzy-022.github.com>\n\n\nはじめに\n--------\n\nxyzzy 0.2.2.239 では主にファイラのフォント設定、\nFFI の改善を行なっています。\n\n\nインストール\n------------\n\nインストーラはありませんので zip を展開するだけです。\nインストールから初期設定までは以下を参照してください。\n\n  * [QuickTour - XyzzyWiki]\n\n\nアップデート\n------------\n\n以下の手順で 0.2.2.235 からアップデートしてください。\n\n  1. 0.2.2.235 のバックアップ取得\n  2. 0.2.2.239 を上書き\n  3. $XYZZY/html を削除 ($XYZZY/docs/old に移動しています)\n  4. xyzzy.wxp を削除\n  5. xyzzy.exe 起動\n\nlisp/ 配下や etc/ 配下をカスタマイズしている場合は\n上書き後に再度カスタマイズをお願いします。\n\n\n機能追加\n--------\n\n  * ファイラに最大化ボタンを付けました (x022235, #297)\n\n  * ファイラのフォントを設定する関数を追加しました (x022235, #57)\n\n    ```lisp\n    ;; ファイラのフォントサイズを設定\n    (add-hook '*init-app-menus-hook*\n              #'(lambda ()\n                  (set-filer-font :face \"メイリオ\" :size 14)))\n    ```\n\n    ※共通設定から設定することはまだ出来ません。今後対応予定です。\n\n  * メニューの最大数を増やしました (xyzzy-17-638, #223)\n\n    今まではメニューの項目数が 1024 個を超えると「メニュー項目が多すぎます」という\n    エラーになっていましたが、今後は約 32,000 個のメニューを作成可能となります。\n\n    ※マルチフレーム版から取り込みました。\n\n  * C のキーワードファイルを更新しました (x022235, #279)\n\n    C11 で追加されたキーワードなど、以下のキーワードを追加しました。\n\n    ```\n    _Alignas\n    _Alignof\n    _Atomic\n    _Generic\n    _Noreturn\n    _Static_assert\n    _Thread_local\n    __func__\n    __DATE__\n    __FILE__\n    __LINE__\n    __TIME__\n    __VA_ARGS__\n    inline\n    ```\n\n  * Perl のキーワードファイルを更新しました (x022235, #277)\n\n    Perl 5.16 で追加されたキーワードなど、以下のキーワードを追加しました。\n\n    ```\n    q\n    x\n    fc\n    evalbytes\n    __SUB__\n    ```\n\n  * コマンドライン オプションを追加しました (x022235, #172)\n\n    * `-r, -require MODULE`\n      * 指定したモジュールを `*load-path*` から探して読み込む\n    * `-I, -load-path PATH`\n      * 指定したパスを `*load-path*` に追加する\n    * `-work-dir DIR`\n      * 指定したディレクトリに移動する\n    * `-trace`\n      * `(toggle-trace-on-error t)` する\n    * `-kill`\n      * xyzzy を終了する\n      * これ以降に指定されたオプションは無視される\n\n\nバグ修正\n--------\n\n  * `indent-region` が最初の行をインデントするようにしました (x022235, #247)\n\n\nxyzzy Lisp 開発者向け機能追加\n-----------------------------\n\n  * `*process-command-line-hook*` から xyzzycli.exe のワーキングディレクトリを取得できるようにしました (x022235, #257)\n\n    xyzzycli.exe のワーキングディレクトリは `*command-line-args-base-directory*` で取得可能です。\n    この変数は `*process-command-line-hook*` を実行している時のみ値が設定されます。\n\n    xyzzy.exe のワーキングディレクトリと異なる場所から xyzzycli.exe を使って相対パス指定でファイルを開くと、\n    `*process-command-line-hook*` には相対パスのファイルパスのみが渡され、\n    xyzzycli.exe のワーキングディレクトリが不明なためファイルのパスがフックからは分からない問題を修正しました。\n\n    ```lisp\n    (add-hook '*process-command-line-hook*\n              #'(lambda (file)\n                  (msgbox \"~A\" (merge-pathnames file *command-line-args-base-directory*))))\n    ```\n\n  * `nth-value` を追加しました (x022235, #292)\n\n    ```lisp\n    (nth-value 1 (values 1 2 3))\n    => 2\n    ```\n\n  * builtin パッケージの一覧を返す関数を追加しました (x022235, #290)\n\n    ```lisp\n    (si:list-builtin-packages)\n    => (#<package: lisp> #<package: system> #<package: keyword> #<package: user>\n        #<package: editor> #<package: common-lisp> #<package: common-lisp-user>)\n\n    (si:*builtin-package-p :system)\n    t\n    ```\n\n  * `C-u M-x apropos` で全パッケージから `apropos` 出来るようにしました (x022235, #287)\n\n  * `apropos` の結果バッファを `lisp-interaction-mode` にしました (x022235, #287)\n\n  * `apropos` の結果バッファでパッケージ名を出力するようにしました (x022235, #287)\n\n    `M-x apropos` で `defun` を検索した結果。\n\n    ```\n    ;; In lisp package\n    defun\n\n    ;; In editor package\n    beginning-of-defun\n    end-of-defun\n    eval-defun\n    mark-defun\n    mode-specific-beginning-of-defun\n    mode-specific-end-of-defun\n    ```\n\n    `C-u M-x apropos` で `defun` を検索した結果。\n\n    ```\n    ;; In lisp package\n    defun\n\n    ;; In system package\n    si::defun-builtin\n    si::defun-builtin-1\n\n    ;; In editor package\n    beginning-of-defun                      ESC C-a\n    end-of-defun                            ESC C-e\n    eval-defun                              ESC C-x\n    mark-defun\n    mode-specific-beginning-of-defun\n    mode-specific-end-of-defun\n\n    ;; In foreign package\n    c:*defun-c-callable\n    c:defun-c-callable\n    ```\n\n    参考: 0.2.2.238 で `M-x apropos` で `defun` を検索した結果。\n\n    ```\n    beginning-of-defun\n    defun\n    end-of-defun\n    eval-defun\n    mark-defun\n    mode-specific-beginning-of-defun\n    mode-specific-end-of-defun\n    ```\n\n  * `ed::find-file-internal` などパッケージ名がついたシンボルでタグジャンプできるようにしました (x022235, #286)\n\n  * xyzzy.ini のパス取得関数を追加しました (xyzzy-17-638, #280)\n\n    ```lisp\n    (xyzzy-ini-path)\n    => \"C:/Tools/xyzzy/usr/Administrator/wxp/xyzzy.ini\"\n    ```\n\n    ※マルチフレーム版から取り込みました。\n\n  * xyzzy 終了時の exit status を指定できるようにしました (x022235, #278)\n\n    ```lisp\n    (kill-xyzzy t)   ; EXIT_SUCCESS\n    (kill-xyzzy nil) ; EXIT_FAILURE\n    (kill-xyzzy 123) ; exit コード指定\n    ```\n\n  * 現在のパッケージで `eval-region`, `eval-print-last-sexp` するようにしました (snmsts, #260)\n\n    以下の順序でパッケージを決定します。\n    1. `*buffer-package*` の値\n    2. `*find-buffer-package-hook*` の評価結果\n\n    `*find-buffer-package-hook*` にはデフォルトで `in-package` で指定した\n    パッケージを返す関数が登録されています。\n    評価時のパッケージをカスタマイズしたい場合はこのフックを利用してください。\n    フックは `run-hook-with-args-until-success` で実行されます。引数はありません。\n\n    注意: lpp をインストールしていると `eval-region`, `eval-print-last-sexp` が\n    上書きされるので注意してください。\n\n  * chunk の印字形式に情報を追加しました (x022235, #243)\n\n    以下の様な形式で印字されます。\n\n    ```lisp\n    (si:make-chunk :int32[] (* 4 2))\n    => #<chunk :type :int32[] :size 8 191191356>\n    ```\n\n  * `si:chunk` 型を定義しました (x022235, #242)\n\n    `check-type` や `typep` で chunk かどうかをチェックできます。\n\n    ```lisp\n    (setf c (si:make-chunk nil 4))\n    => #<chunk :type nil :size 4 191190700>\n\n    (typep c 'si:chunk)\n    => t\t\t\t; 0.2.2.238 では => nil\n\n    (check-type c si:chunk)\n    => nil\t\t\t; 0.2.2.238 では => `c'の値`#<chunk 183636044>'はsystem:chunkではありません\n\n    (setf c \"hoge\")\n    => \"hoge\"\n\n    (check-type c si:chunk)\n    => `c'の値`\"hoge\"'はsystem:chunkではありません\n    ```\n\n  * pack/unpack 時に発生した例外を処理するようにしました (x022235, #251)\n\n    chunk を pack/unpack するときに不正なポインタを参照した場合に、\n    xyzzy ごとクラッシュしていた問題を修正しました。\n\n    ```lisp\n    (setf c (si:make-chunk nil 4 nil 0))\n    => #<chunk :type nil :size 4 191192204>\n\n    (handler-case\n        (si:unpack-int32 c 0)\n      (win32-exception (e)\n        (format nil \"~A\" e)))\n    => \"Win32例外が発生しました: Access violation (c0000005) at 0x1016ba6\"\n    ```\n\n    注意: `win32-exception` は `serious-condition` のサブコンディションなので、\n    `ignore-errors` では補足できません。\n\n  * FFI 呼び出し時に発生した例外を処理するようにしました (x022235, #250)\n\n    `c:define-dll-entry` で定義した関数を呼び出した時に引数を間違えた場合や\n    DLL 内部のバグなどで xyzzy ごとクラッシュしていた問題を修正しました。\n\n    ```lisp\n    (c:define-dll-entry\n      c:int\n      GetModuleHandleA ((c:void *))\n      \"kernel32\")\n    => GetModuleHandleA\n\n    (handler-case\n        (GetModuleHandleA 32)\n      (win32-exception (e)\n        (format nil \"~A\" e)))\n    => \"Win32例外が発生しました: Access violation (c0000005) at 0x772cf7da\"\n    ```\n\n    注意: `win32-exception` は `serious-condition` のサブコンディションなので、\n    `ignore-errors` では補足できません。\n\n  * pack/unpack で 64 bit 整数に対応しました (x022235, #52)\n\n    `si:pack-int64`、`si:pack-uint64`、`si:unpack-int64`、`si:unpack-uint64`\n    関数を追加しました。\n\n    また、`c:int64` および `c:uint64` 型を定義しました。\n\n    ```lisp\n    (setf c (si:make-chunk nil 8))\n    => #<chunk :type nil :size 8 191180684>\n\n    (si:pack-int64 c 0 9876543210)\n    => 9876543210\n\n    (si:unpack-int64 c 0)\n    => 9876543210\n\n    (c:define-dll-entry\n      c:int64\n      (_atoi64 :convention :cdecl) ((c:void *))\n      \"msvcrt\")\n    => _atoi64\n\n    (_atoi64 (si:make-string-chunk \"9876543210\"))\n    => 9876543210\n    ```\n\n  * cdecl 呼び出し規約に対応しました (x022235, #51)\n\n    `c:define-dll-entry` と `c:defun-c-callable` で呼び出し規約を指定できるようにしました。\n    関数名を `(NAME :convention CONVENTION)` という形式のリストで指定します。\n    `CONVENTION` には `:cdecl` か `:stdcall` を指定できます。\n    `CONVENTION` を指定しない場合、または従来通り関数名だけを指定する場合は\n    `:stdcall` として扱います。\n\n    コールバックを cdecl で呼び出す関数に `c:defun-c-callable` で作成した関数を指定すると\n    クラッシュしていた問題を修正しました。\n\n    ```lisp\n    (c:define-dll-entry\n      c:void\n      (qsort :convention :cdecl) ; cdecl 呼び出し\n      ((c:void *)                ; base\n       c:size_t                  ; num\n       c:size_t                  ; width\n       (c:void *))               ; compare\n      \"msvcrt\")\n    => qsort\n\n    (c:defun-c-callable\n      c:int\n      (int32-comparator :convention :cdecl) ; cdecl 呼び出し\n      (((c:void *) elem1)\n       ((c:void *) elem2))\n      (let ((a (si:unpack-int32 (si:make-chunk 'int 4 nil elem1) 0))\n            (b (si:unpack-int32 (si:make-chunk 'int 4 nil elem2) 0)))\n        (cond ((= a b) 0)\n              ((< a b) -1)\n              (t 1))))\n    => int32-comparator\n\n    (flet ((unpack-int32-array (array n)\n             (let (r)\n               (dotimes (i n)\n                 (push (si:unpack-int32 array (* i 4)) r))\n               (nreverse r))))\n      (let* ((n 10)\n             (array (si:make-chunk 'int[] (* n 4))))\n        (dotimes (i n)\n          (si:pack-int32 array (* i 4) (- n i)))\n        (values (unpack-int32-array array n)\n                (progn\n                  (qsort array n 4 #'int32-comparator)\n                  (unpack-int32-array array n)))))\n    => (10 9 8 7 6 5 4 3 2 1)\n    => (1 2 3 4 5 6 7 8 9 10)\n    ```\n\n  * Win32 API 呼び出し時の `GetLastError` を取得する関数を追加 (x022235, #50)\n\n    FFI 呼び出し後に GetLastError の結果を自動的に保存するようにしました。\n    次の FFI 呼び出しをするまで、保存されたエラーコードを `c:last-win32-error` で\n    取得できます。\n    また、`c:last-win32-error` に `setf` することでエラーコードを設定できます。\n\n    ```lisp\n    (c:define-dll-entry\n      c:int\n      MultiByteToWideChar (c:u_int         ; code page\n                           c:u_long        ; character-type options\n                           (c:void *)      ; string to map\n                           c:int           ; number of bytes in string\n                           (c:void *)      ; wide-character buffer\n                           c:int)          ; size of buffer\n      \"kernel32\")\n    => MultiByteToWideChar\n\n    (let ((a (si:make-string-chunk \"abc\"))\n          (u (si:make-chunk nil 9)))\n      (si:clear-chunk u)\n         (setf (c:last-win32-error) 0)\n         (MultiByteToWideChar 932932 0\n                              a (si:chunk-size a)\n                              u (si:chunk-size u))\n         (c:last-win32-error))\n    => 87 ; ERROR_INVALID_PARAMETER\n    ```\n\n\nxyzzy Lisp 開発者向けバグ修正\n-----------------------------\n\n  * `si:binhex-decode` でクラッシュしていた問題を修正しました (x022235, #45)\n\n  * 循環リストを `copy-tree` するとクラッシュしていた問題を修正しました (x022235, #191)\n\n    ```lisp\n    (copy-tree '#1=(#1#))\n    => #1=(#1#)\n\n    (copy-tree '(#1=(1 2 3 #1#) #1#))\n    => (#1=(1 2 3 #1#) #2=(1 2 3 #2#))\n\n    (copy-tree '(#1=(1 2 3) #1#))\n    => ((1 2 3) (1 2 3))\n    ```\n\n  * 循環リストを `equal` や `equalp` で比較するとクラッシュしていた問題を修正 (x022235, #255)\n\n    ```lisp\n    (equal '#1=(#1# 1 2 3) '(#1# 1 2 3))\n    => t\n\n    (equal '#1=(#1# 1 2 3) '(#1# 1 2))\n    => nil\n    ```\n\n  * スペシャル変数をレキシカルに束縛すると `si:closure-variable` で値が取れない問題を修正しました (x022235, #274)\n\n    ```lisp\n    (defvar *hoge* 123)\n    => *hoge*\n\n    (let ((*hoge* 234)\n          (fuga 345))\n      (si:closure-variable #'(lambda ())))\n    => ((fuga . 345) (*hoge* . 234)) ; 0.2.2.238 では => ((fuga . 345) *hoge*)\n    ```\n\n  * 関数定義を上書きしても docstring が削除されない問題を修正しました (x022235, #263)\n\n    ```lisp\n    (defun foo ()\n      \"foo doc\"\n      1)\n    => foo\n\n    (documentation 'foo 'function)\n    => \"foo doc\"\n\n    (defun foo ()\n      1)\n    => foo\n\n    (documentation 'foo 'function)\n    => nil\t\t\t; 0.2.2.238 では => \"foo doc\"\n    ```\n\n  * 一部のリーダマクロが `eval-last-sexp` で評価できない問題を修正しました (x022235, #262)\n\n    ```lisp\n    #5(1 2 3)\n    => #(1 2 3 3 3)\t\t; 0.2.2.238 では => 不正な関数です: 1\n\n    (setf fso (ole-create-object \"Scripting.FileSystemObject\"))\n    => #<oledata 85135436>\n\n    #{fso.BuildPath[\"foo\" \"bar\"]}\n    => \"foo\\\\bar\"\t\t; 0.2.2.238 では => 変数が定義されていません: ]}\n    ```\n\n    注意: lpp をインストールしていると `eval-region`, `eval-print-last-sexp` が\n    上書きされるので注意してください。\n\n  * `M-x lisp-interaction-mode`、`M-x lisp-mode` で `*buffer-package*` が消えないようにしました (x022235, #261)\n\n    lisp ソースファイルを開いたあとに一時的に `lisp-interaction-mode` にした場合に\n    `*buffer-package*` の設定が消えてしまいインデントなどが正しく動作しなくなっていた問題を修正しました。\n\n  * docstring と declare を同時に使うとエラーになる問題を修正しました (x022235, #259)\n\n    ```lisp\n    (defun foo ()\n      (+ x y))\n    => foo\n\n    (defun bar (x y)\n      \"foo doc\"\n      (declare (special x y))\n      (foo))\n    => bar\n\n    (bar 1 2)\n    => 3\t\t\t; 0.2.2.238 では => 関数が定義されていません: declare\n    ```\n\n  * `*read-eval*` のリファレンスのタイポを修正しました (southly, #253)\n\n  * `refresh-screen` が多値を返す問題を修正しました (x022235, #219)\n\n  * builtin.l に抜けている関数を追加しました (x022235, #285)\n\n  * debug 版でダンプファイルがある状態で起動するとassert fail する問題を修正しました (mumurik, #266)\n\n  * debug 版でダンプ作成時に assert fail する問題を修正しました (mumurik, #265)\n\n\nCommon Lisp との互換性向上\n--------------------------\n\n  * `common-lisp` および `common-lisp-user` パッケージを追加しました (x022235, #88)\n\n    注意: とりあえず追加しただけでまだ実用できるレベルではありません。\n\n  * format ~n@A 書式のバグを修正しました (x022235, #246)\n\n    このバグの修正は影響範囲が大きいので `lisp:format` の挙動は修正されません。\n    代わりに `cl:format` を利用してください。\n\n    ```lisp\n    (format nil \"~30@A\" \"foo\")\n    => \"foo                           \"\n\n    (cl:format nil \"~30@A\" \"foo\")\n    => \"                           foo\"\n    ```\n\n  * `*readtable*` を元の値で束縛してから load するようにしました (x022235, #64)\n\n    load 中に `*readtable*` を変更したとしても他のファイルの load には影響を与えません。\n\n    ただし、`*readtable*` が参照しているリードテーブル自体はコピーされないので、\n    独自のリーダーマクロを利用したい場合は以下のように `copy-readtable` してから\n    `*readtable*` の値を変更してください。\n\n    ```lisp\n    (defun enable-hogehoge-syntax ()\n      (setq *readtable* (copy-readtable))\n      (set-dispatch-macro-character #\\# #\\? #'hogehoge-reader))\n    ```\n\n注意事項\n--------\n\n  * NetInstaller で入手可能な以下のパッケージは 0.2.2.239 では\n    本体に同梱しています。インストールすると古いファイルで上書きされるので\n    インストールしないようにしてください。\n\n    ```\n    keyword file                       2007.12.25     2007/12/25 01:27\n    reference.xml                      2007.12.25     2007/12/25 01:23\n    ```\n\n  * NetInstaller で入手可能な以下のパッケージの一部の機能は 0.2.2.239 では\n    本体に同梱しています。インストールするときは注意してください。\n\n    ```\n    lpp                                2008.05.05     2008/05/05 09:16\n    ```\n\n\n既知の問題\n----------\n\n  * (setf (symbol-function)) がシンボル名を返す (#269)\n  * ASCII 以外のサイズはお任せ時に日本語が縦長で表示される (#241)\n  * software-type, software-version が CL と異なる (#169)\n  * :typeがlistかvectorで:namedじゃない構造体でtypepがおかしい (#138)\n  * ローカル関数で (setf READER) (#137)\n  * dualウィンドウモードでfilerのディレクトリ指定が動かない (#130)\n  * c-modeでマクロの継続行のインデントがおかしい (#127)\n  * クリップボードにコピーするとxyzzyが固まる場合がある (#113)\n  * C-u 999 C-g 後にメニュー操作でエラー (#111)\n  * Vista 以降で再変換 (C-c C-c) が動作しない (#101)\n  * ole で responseBody, responseStream を取得できない (#68)\n  * ole-for-each で ie.Document.all の IEnum を取得できない (#67)\n  * ole-create-event-sink に TypeLib のファイル名を明示的に指定しないとエラーになる (#66)\n  * 巨大な文字列に対する正規表現マッチがすごい遅い (#65)\n  * setf の最適化に bug (#63)\n  * handler-case で :no-error を指定してコンパイルするとエラー (#62)\n  * labels の lambda-list 内の init-form で同じ labels 式で定義したローカル関数を呼び出してると、コンパイルで挙動が変わる (#61)\n  * multiframe: 画面端の折り返しがウィンドウ単位でちゃんと動くようにする変更を取り込む (#25)\n\n`(provide \"xyzzy-0.2.2.239\")`\n\n\n  [QuickTour - XyzzyWiki]: http://xyzzy.s53.xrea.com/wiki/index.php?QuickTour\n",
  "release_note_url": "http://xyzzy-022.github.com/xyzzy/2012/05/29/xyzzy-0_2_2_239-release-note/"
}
